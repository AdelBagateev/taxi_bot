from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import sqlite3
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton,\
    InlineKeyboardMarkup, InlineKeyboardButton  
from datetime import datetime, timedelta
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio

 
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
sinline_btn_1 = InlineKeyboardButton('–î–£ –ü—è—Ç—ë—Ä–æ—á–∫–∞', callback_data='s–î–£ –ü—è—Ç—ë—Ä–æ—á–∫–∞')
sinline_btn_2 = InlineKeyboardButton('–î–£ –ü–∞—Ä–∏–Ω–∞', callback_data='s–î–£ –ü–∞—Ä–∏–Ω–∞')
sinline_btn_3 = InlineKeyboardButton('–£–ù–ò–ö–°/–ì–ª–∞–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ/–î–≤–æ–π–∫–∞', callback_data='s–£–ù–ò–ö–°/–ì–ª–∞–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ/–î–≤–æ–π–∫–∞')
sinline_btn_4 = InlineKeyboardButton('–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è 6', callback_data='s–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è 6')
sinline_btn_5 = InlineKeyboardButton('–ú–µ–∂–ª–∞—É–∫–∞ 1/–ú–æ—Å–∫–≤–∞', callback_data='s–ú–µ–∂–ª–∞—É–∫–∞ 1/–ú–æ—Å–∫–≤–∞')
sinline_btn_6 = InlineKeyboardButton('–ë—É—Ç–ª–µ—Ä–æ–≤–∞ 4', callback_data='s–ë—É—Ç–ª–µ—Ä–æ–≤–∞ 4')
sinline_btn_7 = InlineKeyboardButton('–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∏–π —Ç—Ä–∞–∫—Ç 10–∞', callback_data='s–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∏–π —Ç—Ä–∞–∫—Ç 10–∞')
sinline_btn_8 = InlineKeyboardButton('–ë—É—Å—Ç–∞–Ω', callback_data='s–ë—É—Å—Ç–∞–Ω')
sinline_btn_9 = InlineKeyboardButton('–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω 2/–ü—É—à–∫–∏–Ω–∞ 1', callback_data='s–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω 2/–ü—É—à–∫–∏–Ω–∞ 1')
sinline_btn_10 = InlineKeyboardButton('–ê—ç—Ä–æ–ø–æ—Ä—Ç', callback_data='s–ê—ç—Ä–æ–ø–æ—Ä—Ç')

sinline_kb = InlineKeyboardMarkup().add(sinline_btn_1, sinline_btn_2).add(sinline_btn_3).add(sinline_btn_5,sinline_btn_6).add(sinline_btn_4,sinline_btn_8).add(sinline_btn_9).add(sinline_btn_7).add(sinline_btn_10)


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ 
finline_btn_1 = InlineKeyboardButton('–î–£ –ü—è—Ç—ë—Ä–æ—á–∫–∞', callback_data='f–î–£ –ü—è—Ç—ë—Ä–æ—á–∫–∞')
finline_btn_2 = InlineKeyboardButton('–î–£ –ü–∞—Ä–∏–Ω–∞', callback_data='f–î–£ –ü–∞—Ä–∏–Ω–∞')
finline_btn_3 = InlineKeyboardButton('–£–ù–ò–ö–°/–ì–ª–∞–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ/–î–≤–æ–π–∫–∞/–§–∏–∑—Ñ–∞–∫', callback_data='f–£–ù–ò–ö–°/–ì–ª–∞–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ/–î–≤–æ–π–∫–∞/–§–∏–∑—Ñ–∞–∫')
finline_btn_4 = InlineKeyboardButton('–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è 6', callback_data='f–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è 6')
finline_btn_5 = InlineKeyboardButton('–ú–µ–∂–ª–∞—É–∫–∞ 1/–ú–æ—Å–∫–≤–∞', callback_data='f–ú–µ–∂–ª–∞—É–∫–∞ 1/–ú–æ—Å–∫–≤–∞')
finline_btn_6 = InlineKeyboardButton('–ë—É—Ç–ª–µ—Ä–æ–≤–∞ 4', callback_data='f–ë—É—Ç–ª–µ—Ä–æ–≤–∞ 4')
finline_btn_7 = InlineKeyboardButton('–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∏–π —Ç—Ä–∞–∫—Ç 10–∞', callback_data='f–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∏–π —Ç—Ä–∞–∫—Ç 10–∞')
finline_btn_8 = InlineKeyboardButton('–ë—É—Å—Ç–∞–Ω', callback_data='f–ë—É—Å—Ç–∞–Ω')
finline_btn_9 = InlineKeyboardButton('–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω 2/–ü—É—à–∫–∏–Ω–∞ 1', callback_data='f–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω 2/–ü—É—à–∫–∏–Ω–∞ 1')
finline_btn_10 = InlineKeyboardButton('–ê—ç—Ä–æ–ø–æ—Ä—Ç', callback_data='f–ê—ç—Ä–æ–ø–æ—Ä—Ç')



finline_kb = InlineKeyboardMarkup().add(finline_btn_1, finline_btn_2).add(finline_btn_3).add(finline_btn_5,finline_btn_6).add(finline_btn_4,finline_btn_8).add(finline_btn_9).add(finline_btn_7).add(finline_btn_10)



# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def time_kb():
    volue_timebtn_1 = str(datetime.now().strftime("%H:%M") + "-" + sum_time(0,10))
    volue_timebtn_2 = str(sum_time(0,10) + "-" + sum_time(0,20))
    volue_timebtn_3 = str(sum_time(0,20) + "-" + sum_time(0,30))
    volue_timebtn_4 = str(sum_time(0,30) + "-" + sum_time(0,40))
    volue_timebtn_5 = str(sum_time(0,40) + "-" + sum_time(0,50))
    volue_timebtn_6 = str(sum_time(0,50) + "-" + sum_time(0,60))
    timeinline_btn_1 = InlineKeyboardButton(volue_timebtn_1, callback_data='timeinterval'+volue_timebtn_1)
    timeinline_btn_2 = InlineKeyboardButton(volue_timebtn_2, callback_data='timeinterval'+volue_timebtn_2)
    timeinline_btn_3 = InlineKeyboardButton(volue_timebtn_3, callback_data='timeinterval'+volue_timebtn_3)
    timeinline_btn_4 = InlineKeyboardButton(volue_timebtn_4, callback_data='timeinterval'+volue_timebtn_4)
    timeinline_btn_5 = InlineKeyboardButton(volue_timebtn_5, callback_data='timeinterval'+volue_timebtn_5)
    timeinline_btn_6 = InlineKeyboardButton(volue_timebtn_6, callback_data='timeinterval'+volue_timebtn_6)

    time_inline_kb =  InlineKeyboardMarkup(row_width=3).add(timeinline_btn_1, timeinline_btn_2, timeinline_btn_3, timeinline_btn_4, timeinline_btn_5, timeinline_btn_6)
    return time_inline_kb

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ 
markup_request_zapolnit_again = ReplyKeyboardMarkup(resize_keyboard=True).add(# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥—è—â–∞—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤
    KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ'))




# –∫–ª–∞–≤–∏—Ç—É—Ä–∞ —Å—Å—ã–ª–∫–∞
keyboard_url = InlineKeyboardMarkup()
button = InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å', url='https://telegram-pro.ru/kak-pomenyat-imya-v-telegramme-instruktsiya-po-primeneniyu/')
keyboard_url.add(button)


# "https://geek-help.ru/kak-sdelat-imya-polzovatelya-v-telegram/#:~:text=%D0%BD%D0%B0%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%2C%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D0%B2%20%D1%86%D0%B8%D1%84%D1%80%D1%8B.-,%D0%9A%D0%B0%D0%BA%20%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C%20%D0%B8%D0%BC%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F%20%D0%B2%20%D0%A2%D0%B5%D0%BB%D0%B5%D0%B3%D1%80%D0%B0%D0%BC%20%D1%81%20%D1%82%D0%B5%D0%BB%D0%B5%D1%84%D0%BE%D0%BD%D0%B0,%D0%A1%D1%80%D0%B0%D0%B7%D1%83%20%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%20%D1%8D%D1%82%D0%BE%D0%B3%D0%BE%20%D0%B8%D0%BC%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F%20%D0%B1%D1%83%D0%B4%D0%B5%D1%82%20%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%BE.,-%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%B8%D1%82%D0%B5%20%D0%B2%D0%BD%D0%B8%D0%BC%D0%B0%D0%BD%D0%B8%D0%B5
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥—è—â–∞—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤
markup_request_start = ReplyKeyboardMarkup(resize_keyboard=True).add(# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥—è—â–∞—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤
    KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ'),KeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è‚è∞') ).add(KeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤üîé')).add(KeyboardButton('–Ø –Ω–∞—à–µ–ª –ø–æ–ø—É—Ç—á–∏–∫–æ–≤, –≤—ã–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É‚õîÔ∏è'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ª–æ–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
markup_request_unknown_message = ReplyKeyboardMarkup(resize_keyboard=True).add(# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥—è—â–∞—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤
    KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ'),KeyboardButton('–ü–æ–º–æ—â—åüÜò'))
# –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add( # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç‚úÖ', request_contact=True),KeyboardButton('–Ø –Ω–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º‚ùå')
)
# –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é
markup_request_time = ReplyKeyboardMarkup(resize_keyboard=True).add( # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é
    KeyboardButton('–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è‚è∞')
)



# –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–∞ —á—Ç–æ–± —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è 
storage = MemoryStorage()# –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–∞ —á—Ç–æ–± —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è 


# –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏(—Ö—É–π –∑–Ω–∞–µ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç =) )
class Form(StatesGroup):
    time = State()
class Mail(StatesGroup):
    mass_mailing = State()


# –∏–¥–µ–Ω—Ü–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token='5264359095:AAGIRxsQKXFPgJYmxsAv2NSg20gIUG4_6AY')# –∏–¥–µ–Ω—Ü–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –±–æ—Ç–∞
dp = Dispatcher(bot, storage = storage) 



# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
conn = sqlite3.connect('orders.db') # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
cur = conn.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS users
              (userid INT, username TEXT, start TEXT, finish TEXT,  fTime INT, sTime INT, time_str TEXT )''')


# 1.0
# —Ö—ç–Ω–¥–ª–µ—Ä STARTa 
@dp.message_handler(commands=['start'] ) # —Ö—ç–Ω–¥–ª–µ—Ä STARTa 
async def process_start_command(message: types.Message):
    deleter(message.chat.id)
    try:
        await bot.send_message(message.chat.id, "–ó–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É!", reply_markup=types.ReplyKeyboardRemove())
    except:
        await asyncio.sleep(0.1)
    userid_setter(message.from_user.id)
    if message.from_user.username == None:
# \n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —Ö–æ—á–µ—à—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä - —É–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è. –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –æ —Ç–æ–º, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å <a href="https://geek-help.ru/kak-sdelat-imya-polzovatelya-v-telegram/#:~:text=%D0%BD%D0%B0%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%2C%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D0%B2%20%D1%86%D0%B8%D1%84%D1%80%D1%8B.-,%D0%9A%D0%B0%D0%BA%20%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C%20%D0%B8%D0%BC%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F%20%D0%B2%20%D0%A2%D0%B5%D0%BB%D0%B5%D0%B3%D1%80%D0%B0%D0%BC%20%D1%81%20%D1%82%D0%B5%D0%BB%D0%B5%D1%84%D0%BE%D0%BD%D0%B0,%D0%A1%D1%80%D0%B0%D0%B7%D1%83%20%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%20%D1%8D%D1%82%D0%BE%D0%B3%D0%BE%20%D0%B8%D0%BC%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F%20%D0%B1%D1%83%D0%B4%D0%B5%D1%82%20%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%BE.,-%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%B8%D1%82%D0%B5%20%D0%B2%D0%BD%D0%B8%D0%BC%D0%B0%D0%BD%D0%B8%D0%B5">—Ç—É—Ç</a> '''
#   parse_mode=types.ParseMode.HTML)
        try:
            await bot.send_message(message.from_user.id, '''–£ —Ç–µ–±—è –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüò®\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ø—É—Ç—á–∏–∫–∞–º–∏''', reply_markup=markup_request)
        except:
            await asyncio.sleep(0.1)
    else: 
        username_setter(message.from_user.id,"@" + message.from_user.username)
        try:
            # await bot.send_message(message.chat.id, '''üÖÇ    üÖÉ    üÑ∞    üÖÅ    üÖÉ''')
            await bot.send_message(message.chat.id, '''üü¢    S    T    A    R    T    üü¢\n\n–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É ''', reply_markup=sinline_kb)
        except:
            await asyncio.sleep(0.1)



@dp.message_handler(lambda message: message.text == "–Ø –Ω–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º‚ùå")
async def does_not_want_share_contact(message: types.Message):
    await bot.send_message(message.from_user.id,'''–¢–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ø—É—Ç—á–∏–∫–∞–º–∏. –≠—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!

‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è''', reply_markup=keyboard_url)
    await bot.send_message(message.from_user.id,"‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è",  reply_markup= ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ')))




# 1.1
# —Ö—ç–Ω–¥–ª–µ—Ä –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Å—Ç–≤–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞
@dp.message_handler(content_types=types.ContentType.CONTACT) # –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è sharing'a –Ω–æ–º–µ—Ä–æ–º
async def test(message: types.Message):
    try:
        await bot.send_message(message.chat.id, "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!\n–¢–≤–æ–π –Ω–æ–º–µ—Ä: "+ message.contact.phone_number, reply_markup=types.ReplyKeyboardRemove())
    except:
        await asyncio.sleep(0.1)
    username_setter(message.chat.id, message.contact.phone_number)
    try:
        # await bot.send_message(message.chat.id, '''üÖÇ    üÖÉ    üÑ∞    üÖÅ    üÖÉ''')
        await bot.send_message(message.chat.id, '''üü¢    S    T    A    R    T    üü¢\n\n–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É''', reply_markup=sinline_kb)
    except:
        await asyncio.sleep(0.1)





# 2.0
# —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏ 
@dp.callback_query_handler(lambda c:  c.data and c.data.startswith('s'))# —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä–æ—Ç–æ–≤–π —Ç–æ—á–∫–∏
async def process_callback_button_start(callback_query: types.CallbackQuery):
    try:
        await bot.answer_callback_query(callback_query.id)
    except:
        await asyncio.sleep(0.1)
    start_setter(callback_query.from_user.id,callback_query.data[1::])
    try:
        # await bot.send_message(callback_query.from_user.id,'üÑµ    üÑ∏    üÑΩ    üÑ∏    üÖÇ    üÑ∑')
        await bot.send_message(callback_query.from_user.id, 'üî¥    F    I    N    I    S    H    üî¥\n\n–ê —Ç–µ–ø–µ—Ä—å –∫–æ–Ω–µ—á–Ω—É—é', reply_markup=finline_kb)
    except:
        await asyncio.sleep(0.1)

# üÜÇ üÜÉüÜÅüÖµüÖ∏üÖΩüÖ∑                                                                   üÜÇ üÜÉ üÖê üÜÅ üÜÉ
# üÖê üÖë üÖí üÖì üÖî üÖï üÖñ üÖó üÖò üÖô üÖö üÖõ üÖú üÖù üÖû üÖü üÖ† üÖ° üÖ¢ üÖ£ üÖ§ üÖ• üÖ¶ üÖß üÖ® üÖ©             üÖ¢ üÖ£ üÖê üÖ° üÖ£
# ‚í∂ ‚í∑ ‚í∏ ‚íπ ‚í∫ ‚íª ‚íº ‚íΩ ‚íæ ‚íø ‚ìÄ ‚ìÅ ‚ìÇ ‚ìÉ ‚ìÑ ‚ìÖ ‚ìÜ ‚ìá ‚ìà ‚ìâ ‚ìä ‚ìã ‚ìå ‚ìç ‚ìé ‚ìè     ‚ìà ‚ìâ ‚í∂ ‚ìá ‚ìâ    ‚íª ‚íæ ‚ìÉ ‚íæ ‚ìà ‚íΩ
# üÑ∞ üÑ± üÑ≤ üÑ≥ üÑ¥ üÑµ üÑ∂ üÑ∑ üÑ∏ üÑπ üÑ∫ üÑª üÑº üÑΩ üÑæ üÑø üÖÄ üÖÅ üÖÇ üÖÉ üÖÑ üÖÖ üÖÜ üÖá üÖà üÖâ                     üÖÇ üÖÉ üÑ∞ üÖÅ üÖÉ       üÑµ üÑ∏ üÑΩ  üÑ∏ üÖÇ  üÑ∑
# ‚í∂ ‚í∑ ‚í∏ ‚íπ ‚í∫ ‚íª ‚íº ‚íΩ ‚íæ ‚íø ‚ìÄ ‚ìÅ ‚ìÇ ‚ìÉ ‚ìÑ ‚ìÖ ‚ìÜ ‚ìá ‚ìà ‚ìâ ‚ìä ‚ìã ‚ìå ‚ìç ‚ìé ‚ìè

# 3.0
# —Ö—ç–Ω–¥–ª–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
@dp.callback_query_handler(lambda c:  c.data and c.data.startswith('f')) # —Ö—ç–Ω–¥–ª–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
async def process_callback_button_finish(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    finish_setter(callback_query.from_user.id, callback_query.data[1::])
    if start_getter(callback_query.from_user.id) == callback_query.data[1::]:
        try:
            await bot.send_message(callback_query.from_user.id, "–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—á–∞–ª—å–Ω–æ–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫!")
            await bot.send_message(callback_query.from_user.id, '''üü¢    S    T    A    R    T    üü¢\n\n–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É:''', reply_markup=sinline_kb)
        except:
            await asyncio.sleep(0.1)
        return 
    try:
        await bot.send_message(callback_query.from_user.id, "–¢–≤–æ–π –º–∞—Ä—à—Ä—É—Ç üöÄ:\n\n" + start_getter(callback_query.from_user.id) +" ‚Äî> "+ callback_query.data[1::], reply_markup= markup_request_time)
    except:
        await asyncio.sleep(0.1)
    time_inline_kb = time_kb() 
    try:
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=time_inline_kb)
    except:
        await asyncio.sleep(0.1)

# —Ö—ç–Ω–¥–ª–µ—Ä –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è
@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è‚è∞")
async def choose_time_period_one_more(message: types.Message):
    await choose_time_period(message)
# 4.05



# —Ö—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è"
@dp.message_handler(lambda message: message.text == "–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è‚è∞")# —Ö—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è"
async def choose_time_period(message: types.Message):
    try:
        await bot.send_message(message.chat.id,"–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú\n\n–ö –ø—Ä–∏–º–µ—Ä—É 20:30-21:05 –∏–ª–∏ 09:05-09:45", reply_markup=types.ReplyKeyboardRemove())
    except:
        await asyncio.sleep(0.1)
    await Form.time.set()


# 4.1
# —Ö—ç–Ω–¥–ª–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é 
@dp.message_handler(state=Form.time)# —Ö—ç–Ω–¥–ª–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é 
async def process_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data'] = message.text
    #  –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞—Ö–æ—Ç—è—Ç –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É 
    if message.text == '/start':
        await state.finish()
        await process_start_command(message)
        return
    user_message = message.text
    flag = 'EROR'
    if len(user_message)==11 and  user_message[2]==':' and user_message[8]==':' and user_message[5]=='-':
        if   (0 <= int(user_message[:2:]) < 24) and (0 < int(user_message[6:8:]) <= 24) and (0 <= int(user_message[3:5:]) < 60) and (0 <= int(user_message[9:11:]) < 60):
            if ((int(user_message[3:5:]) <= int(user_message[9:11:])) and (int(user_message[:2:]) <= int(user_message[6:8:]))) or ((int(user_message[3:5:]) > int(user_message[9:11:])) and (int(user_message[:2:]) < int(user_message[6:8:]))):
                flag = 1
    try:
        f1 =int(user_message[:2:]) 
        f2 = int(user_message[3:5:]) 
        f3 = int(user_message[9:11:]) 
        f4 = int(user_message[6:8:]) 
        f5 = int(flag)
    except Exception:
        try:
            await bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫!")
        except:
            await asyncio.sleep(0.1)
        return
    else:
        time_str_setter(message.chat.id,user_message)
        first_hours_in_minutes = int(user_message[:2:])* 60 
        first_minutes = int(user_message[3:5:]) 
        fTime = first_hours_in_minutes+ first_minutes
        fTime_setter(message.chat.id, fTime)

        second_hours_in_minutes = int(user_message[6:8:])* 60 
        second_minutes = int(user_message[9:11:])
        sTime = second_hours_in_minutes+second_minutes
        sTime_setter(message.chat.id, sTime)
        if (sTime - fTime) > 120:
            try:
                await bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")
            except:
                await asyncio.sleep(0.1)
            return
        await state.finish()
    
    
    # –≤—ã–±–∏—Ä–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ 
    await giving_suitable_users(message.chat.id) 
    



# 4.2
# —Ö—ç–Ω–¥–ª–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c:  c.data and c.data.startswith('timeinterval'))# —Ö—ç–Ω–¥–ª–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def process_callback_time_inline(callback_query: types.CallbackQuery): 
    await bot.answer_callback_query(callback_query.id)
    
    fTime_str_version = callback_query.data[12:17:]
    first_hours_in_minutes = int(fTime_str_version[:2:])* 60 
    first_minutes = int(fTime_str_version[3::]) 
    fTime = first_hours_in_minutes+ first_minutes
    fTime_setter(callback_query.from_user.id, fTime)

    sTime_str_version = callback_query.data[18::]
    time_str_setter(callback_query.from_user.id,  fTime_str_version+'-'+sTime_str_version)
    second_hours_in_minutes = int(sTime_str_version[:2:])* 60 
    second_minutes = int(sTime_str_version[3::])
    sTime = second_hours_in_minutes+second_minutes
    sTime_setter(callback_query.from_user.id,sTime)
    # –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ—è—â–∏–µ 
    await giving_suitable_users(callback_query.from_user.id)




# ST\


# 5.0
# —Ö—ç–Ω–¥–ª–µ—Ä '–Ø –Ω–∞—à–µ–ª –ø–æ–ø—É—Ç—á–∏–∫–æ–≤, –≤—ã–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É'
@dp.message_handler(lambda message: message.text == "–Ø –Ω–∞—à–µ–ª –ø–æ–ø—É—Ç—á–∏–∫–æ–≤, –≤—ã–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É‚õîÔ∏è")# —Ö—ç–Ω–¥–ª–µ—Ä '–Ø –Ω–∞—à–µ–ª –ø–æ–ø—É—Ç—á–∏–∫–æ–≤, –≤—ã–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É'
async def process_START_command(message: types.Message):
    deleter(message.chat.id)
    userid_setter(message.chat.id)
    username_setter(message.chat.id,"@"+ message.chat.username)
    try:
        await bot.send_message(message.chat.id,"–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!", reply_markup=markup_request_unknown_message)
    except:
        await asyncio.sleep(0.1)

# 5.1
# —Ö—ç–Ω–¥–ª–µ—Ä '–ü–æ—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤'
@dp.message_handler(lambda message: message.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤üîé")# —Ö—ç–Ω–¥–ª–µ—Ä '–ü–æ—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤'
async def process_START_command(message: types.Message):
        await giving_suitable_users(message.chat.id)


# 5.2
# —Ö—ç–Ω–¥–ª–µ—Ä –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ
@dp.message_handler(lambda message: message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ")  # —Ö—ç–Ω–¥–ª–µ—Ä –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ  
async def process_START_command(message: types.Message):
    await process_start_command(message)


# —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–º–æ—â—å
@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—åüÜò")  # —Ö—ç–Ω–¥–ª–µ—Ä –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ  
async def process_help_command(message: types.Message):
    try:
        await bot.send_message(message.chat.id,'''–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç üôÉ
–Ø –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –≤ —Ç–∞–∫—Å–∏.

–í—Å—ë –ø—Ä–æ—Å—Ç–æ üöï

1. –í—ã–±–∏—Ä–∞–µ—à—å —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞, —Ñ–∏–Ω–∏—à–∞ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è

2. –ü–æ–ª—É—á–∞–µ—à—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π''', reply_markup=markup_request_zapolnit_again)
    except:
        await asyncio.sleep(0.1)


        
# –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@dp.message_handler(lambda message: message.text == "mass_mailing")
async def mass_mailing(message:types.Message):
    print("asdasd")
    if message.chat.id == 526233352:
        await Mail.mass_mailing.set()   
    else:
        process_unknown_comands(message)

# –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å STATE
@dp.message_handler(state=Mail.mass_mailing)
async def process_mass_mailing(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data'] = message.text
    print("asdasd")
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users")
    arr_of_all_users = cur.fetchall()
    for user in arr_of_all_users:
        try:
            await bot.send_message(user[0],message.text)
        except:
            await asyncio.sleep(0.1)
    await state.finish()


# –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è 
@dp.message_handler(content_types=types.ContentType.ANY)
async def process_unknown_comands(message: types.Message):
    try:
        await bot.send_message(message.chat.id,"–ö–•–ú.. –ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ãü§î\n\n–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, –∞ —Ç–∞–º —Ä–∞–∑–±–µ—Ä–µ–º—Å—è",reply_markup=markup_request_unknown_message)
    except:
        await asyncio.sleep(0.1)





# —Ñ–∏–Ω–∞–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è –æ—Ç–≤–µ—Ç 
async def giving_suitable_users(id:int):
    fTime = fTime_getter(id)
    sTime = sTime_getter(id)
    arr_of_suitable_users = selector_with_timePeriod(fTime, sTime, id)
    if len(arr_of_suitable_users) == 0:
        try:
            await bot.send_message(id, "–ü–æ–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ãüòï\n\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å, –ø–æ–∫–∞ –æ–Ω–∏ —Å–∞–º–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è", reply_markup=markup_request_start)
        except:
            await asyncio.sleep(0.1)
    else:
        for i in arr_of_suitable_users:
            try:
                await bot.send_message(id,  '–ù–∞—à–µ–ª —Ç–µ–±–µ –ø–æ–ø—É—Ç—á–∏–∫–∞! –°–∫–æ—Ä–µ–µ —Å–≤—è–∂–∏—Å—å —Å –Ω–∏–º - ' + i[1]+"\n–í—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è - "+time_str_getter(userid_getter(i[1])), reply_markup=markup_request_start)
            except:
                await asyncio.sleep(0.1)



# –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è ID
def deleter(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è id 
    cur.execute(f'''DELETE FROM users WHERE userid= "{userid}" ''')
    conn.commit()


# —Å–µ—Ç—Ç–µ—Ä—ã –ø–æ–ª–µ–π –≤ –ë–î
def userid_setter(userid:int):# —Å–µ—Ç—Ç–µ—Ä—ã –ø–æ–ª–µ–π –≤ –ë–î
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'INSERT INTO users (userid) VALUES("{userid}")')
    conn.commit()
def username_setter(userid:int, username:str):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'UPDATE users SET username = "{username}" where userid = "{userid}"')
    conn.commit()
def start_setter(userid:int, start:str):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'UPDATE users SET start = "{start}" where userid = "{userid}"')
    conn.commit()
def finish_setter(userid:int, finish:str):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'UPDATE users SET finish = "{finish}" where userid = "{userid}"')
    conn.commit()
def fTime_setter(userid:int, fTime:str):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'UPDATE users SET fTime = "{fTime}" where userid = "{userid}"')
    conn.commit()
def sTime_setter(userid:int, sTime:str):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'UPDATE users SET sTime = "{sTime}" where userid = "{userid}"')
    conn.commit()
def time_str_setter(userid:int, time_str:str):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    # –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ     
    cur.execute(f'UPDATE users SET time_str = "{time_str}" where userid = "{userid}"')
    conn.commit()
# 758821428 


# –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –∏–∑ –ë–î
def userid_getter(username):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor() 
    cur.execute(f'SELECT `userid` FROM users WHERE username = "{username}"')
    return int(cur.fetchall()[0][0])
def start_getter(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor() 
    cur.execute(f'SELECT `start` FROM users WHERE userid = "{userid}"')
    return str(cur.fetchall()[0][0])
def finish_getter(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor() 
    cur.execute(f'SELECT `finish` FROM users WHERE userid = "{userid}"')
    return str(cur.fetchall()[0][0])
def sTime_getter(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor() 
    cur.execute(f'SELECT `sTime` FROM users WHERE userid = "{userid}"')
    return int(cur.fetchall()[0][0])
def fTime_getter(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor() 
    cur.execute(f'SELECT `fTime` FROM users WHERE userid = "{userid}"')
    return int(cur.fetchall()[0][0])
def time_str_getter(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor() 
    cur.execute(f'SELECT `time_str` FROM users WHERE userid = "{userid}"')
    
    return cur.fetchall()[0][0]



# —Ñ—É–Ω–∫–∏—è —Å–∫–ª–∞–¥—ã–≤–∞—é—â–∞—è —Ç–µ–∫—É—â–µ–µ  –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è 
def sum_time(delhours:int, delminutes:int):
    nowHours = int(datetime.now().strftime("%H"))
    nowMinutes = int(datetime.now().strftime("%M"))
    tm1 = timedelta(hours=nowHours, minutes=nowMinutes)
    tm2 = timedelta(hours=delhours, minutes=delminutes)
    result = str(tm1 + tm2)
    result = result[:-3:] 
    if len(result)>5:
        result = result[7::]
    if len(result) == 4:
        result = '0'+result
    return result
    # print(result)



# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞—é—â–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ 
def selector_with_start_final(userid):
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    spoint = start_getter(userid)
    fpoint = finish_getter(userid)
    cur.execute("SELECT * FROM users WHERE start=? AND finish=? AND userid != ?",
          (spoint, fpoint, userid))
    podhodyshie_users= cur.fetchall()
    return podhodyshie_users





# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞—é—â–∞—è —é–∑–µ—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ 
def selector_with_timePeriod(fTime, sTime, userid):
    arr_neccesary_time = [] 
    podhodyshie_users = selector_with_start_final(userid)
    if len(podhodyshie_users) == 0:
        return []

    arr_of_suitable_users = []
    for i in range(fTime, sTime):
        arr_neccesary_time.append(i)

    for user in podhodyshie_users:
        fTime_user = user[4]
        sTime_user = user[5]
        for i in range(fTime_user, sTime_user):
            if i in arr_neccesary_time:
                arr_of_suitable_users.append(user)
                break
    return arr_of_suitable_users



# –≤—ã—Ö–æ–¥–∏–º —Å –±–æ—Ç–∞ 
if __name__ == '__main__':
    executor.start_polling(dp)